{
  "plugins": ["@typescript-eslint", "prettier", "import", "unused-imports"],
  "extends": [
    "next/core-web-vitals",
    "next/typescript",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-type-checked",
    "plugin:@typescript-eslint/stylistic",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:prettier/recommended",
    "plugin:import/typescript",
    "plugin:tailwindcss/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "projectService": true,
    "tsconfigRootDir": "."
  },
  "rules": {
    /**
     * Base ESLint rules
     */
    "arrow-body-style": ["error", "as-needed"],
    "no-useless-escape": "off",
    "no-console": "error",
    "consistent-return": "off",
    "no-underscore-dangle": "off",
    "class-methods-use-this": "off",
    "no-void": ["error", { "allowAsStatement": true }],

    /**
     * Typescript
     */
    "@typescript-eslint/consistent-type-definitions": "warn",
    "@typescript-eslint/ban-ts-comment": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-empty-object-type": "warn",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/no-misused-promises": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-redeclare": "error",
    "@typescript-eslint/no-require-imports": "error",
    "@typescript-eslint/no-shadow": [
      "error",
      {
        "ignoreTypeValueShadow": true,
        "ignoreFunctionTypeParameterNameValueShadow": true
      }
    ],
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/prefer-ts-expect-error": "off",
    "@typescript-eslint/prefer-optional-chain": "off",
    "require-await": "warn",
    "@typescript-eslint/require-await": "warn",
    "no-return-await": "warn",
    "@typescript-eslint/return-await": "error",
    "@typescript-eslint/consistent-type-assertions": ["error", { "assertionStyle": "never" }],
    "@typescript-eslint/prefer-nullish-coalescing": [
      "error",
      { "ignorePrimitives": { "string": true } }
    ],

    "@typescript-eslint/no-unsafe-argument": "warn",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-return": "warn",

    /**
     * Imports
     */
    "import/export": "error",
    "import/first": "error",
    "import/newline-after-import": "warn",
    "import/no-default-export": "warn",
    "import/no-duplicates": "error",
    "import/no-extraneous-dependencies": "off",
    "import/order": [
      "error",
      {
        "alphabetize": {
          "order": "asc" /* sort in ascending order. Options: ['ignore', 'asc', 'desc'] */,
          "caseInsensitive": false /* ignore case. Options: [true, false] */
        },
        "newlines-between": "never",
        "groups": ["builtin", "external", ["internal", "parent", "sibling"], "index"]
      }
    ],
    "import/prefer-default-export": "off",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": "error",
    "@typescript-eslint/no-unused-vars": "warn",

    /**
     * React
     */
    "react/display-name": "off",
    "react/no-array-index-key": "warn",
    "react/prop-types": "off",
    "react/react-in-jsx-scope": "error",
    "react/no-unstable-nested-components": "error",
    "react/self-closing-comp": "error",
    "react/jsx-no-constructed-context-values": "error",
    "react/no-unused-prop-types": "error",
    "react/jsx-no-leaked-render": ["error", { "validStrategies": ["ternary"] }],
    "react/jsx-no-useless-fragment": "error",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error",
    "react/jsx-no-literals": [
      "warn",
      {
        "allowedStrings": [",", ".", ":"]
      }
    ]
  }
}
